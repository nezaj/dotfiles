" ============================ Initial Configs ============================

set nocompatible                        " Enable Vim features
set hidden                              " Buffers can exist in background
syntax on                               " Turn on syntax highlighting
let mapleader = ","                     " Set <leader> character
colorscheme jellybeans                  " Ahh yeaa
set term=screen-256color                " Prevent terminal bg color bleeding in

" ============================ General Config ============================

set number                              " Line numbers!
set backspace=indent,eol,start          " Allow backspace in insert mode
set showcmd                             " Show incomplete commands at bottom
set showmode                            " Show current mode down the bottom
set gcr=a:blinkon0                      " Disable cursor blink
set visualbell                          " No Sounds
set noshowmode                          " using lightlightline instead
set ruler                               " show the cursor position all the time
set history=100                         " keep 50 lines of command line history
set noswapfile                          " Annoying
set ttyfast                             " Tell vim we're using a fast terminal connection
set laststatus=2                        " lightline needs this to display status when opening first buffer
set scrolloff=8                         " Start scrolling 8 lines away form
set shortmess+=I                        " Remove Vim startup message for empty file
set splitbelow                          " Default horizontal split below
set splitright                          " Default vertical split right

" Wrap settings
set wrap
set linebreak                           " Wrap lines at convienent points
set textwidth=0
set wrapmargin=0

" Searching
set hlsearch                            " highlight searching
set incsearch                           " do incremental searching
set ignorecase                          " searches are case insensitive
set smartcase                           " unless a capital letter

" Tabs and Spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Auto adjust window sizes when they become current
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

" ============================ Key Mappings ============================

" Highlight intials in notes
:match Todo /JA:/

" Easy Navigating
:inoremap jk <Esc>
:nnoremap j gj
:nnoremap k gk

" Easy Window cycling
:nnoremap <C-h> <C-w>h
:nnoremap <C-j> <C-w>j
:nnoremap <C-k> <C-w>k
:nnoremap <C-l> <C-w>l

" Save/Discard
:noremap <leader>w :w<CR>
:nnoremap <leader>q :q!<CR>
:nnoremap <leader>zz :qa!<CR>

" Reload all windows in all tabs
:nnoremap <leader>r :tabdo exec 'windo e'<cr>

" Reload vimrc file
:nnoremap <silent><leader>sv :so $MYVIMRC<CR>

" Edit useful files
:nnoremap <silent><leader>ev :e $MYVIMRC<CR>
:nnoremap <silent><leader>et :e $MYTMUXCONF<CR>
:nnoremap <silent><leader>eb :e $MYBASH<CR>
:nnoremap <silent><leader>ep :e $MYPRIVATE<CR>
:nnoremap <silent><leader>ed :e $MYTODOS<CR>

" Clear search
:nnoremap <silent> ,/ :nohlsearch<CR>

" Easy Command Mode
:nnoremap ; :

" Toggle NerdTree
:nnoremap <leader>nt :NERDTreeToggle<return>

" Toggle show formatting
:nnoremap <leader>l :set list!<CR>

" Window Manipulation
:nnoremap <leader>v :vsp<CR>
:nnoremap <leader>m :vertical resize 80<CR>

" Fugitive Shortcuts
:nnoremap <leader>gs :Gstatus<CR>
:nnoremap <leader>gd :Gdiff<CR>
:nnoremap <leader>gc :Gcommit<CR>
:nnoremap <leader>gb :Gblame<CR>
:nnoremap <leader>gl :Glog<CR>

" Shortcuts for switching tabs
:nnoremap <leader>1 1gt
:nnoremap <leader>2 2gt
:nnoremap <leader>3 3gt
:nnoremap <leader>4 4gt
:nnoremap <leader>5 5gt
:nnoremap <leader>6 6gt
:nnoremap <leader>7 7gt
:nnoremap <leader>8 8gt
:nnoremap <leader>9 9gt
:nnoremap <leader>0 :tablast<CR>
:nnoremap <leader>x :tabclose<CR>
:nnoremap <leader>t :0tabnew<CR>

" Remap Ctrl-p
:nmap <leader>p <C-p>
:nnoremap <leader>P :set invpaste!<CR>
:nnoremap <leader>. :CtrlPTag<CR>

" Ctags mapping
:nnoremap <leader>g <C-]>
:nnoremap <leader>b <C-t>

" Tagbar
:nnoremap <leader>] :TagbarToggle<CR>

" Ack
:nnoremap <leader>a :Ack

" Easy commenting
:nnoremap // :TComment<CR>
:vnoremap // :TComment<CR>

" Don't use arrow keys :)
:nnoremap <Left>  <NOP>
:nnoremap <Right> <NOP>
:nnoremap <Up>    <NOP>
:nnoremap <Down>  <NOP>

" ============================ Plugins ============================

" Enable Pathogen
call pathogen#infect()
call pathogen#incubate()

" Ignore these files when using ctrlp
set wildignore+="/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(swp|pyc)$'
    \ }

" Lightline Settings
let g:lightline = {
    \ 'colorscheme': 'jellybeans',
    \ 'mode_map': { 'c': 'NORMAL' },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
    \ },
    \ 'component_function': {
    \   'fugitive': 'MyFugitive'
    \ },
    \ 'separator': { 'left': "", 'right': '' },
    \ 'subseparator': { 'left': '|', 'right': '|' }
    \ }

" NERDTree settings
let NERDTreeIgnore = ['\.pyc$']

" ============================ Functions ============================

" Strip whitespace and save cursor position
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! MyFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? "\u00A7 "._ : ''
  endif
  return ''
endfunction

" autocmd config
if has("autocmd")
    " Enable filetype detection
    filetype on

    " White Space Settings for different file types
    autocmd FileType python setlocal ts=4 sts=4 sw=4 et
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 et
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et
    autocmd FileType htmlcheetah setlocal ts=2 sts=2 sw=2 et

    " Clean up trailing white spaces
    autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
endif
